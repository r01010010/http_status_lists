0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.8
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/r01010010/Projects/http_status_lists',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/Users/r01010010/.npm/http-status-lists/0.0.3/package.tgz',
8 verbose tar pack   '/Users/r01010010/Projects/http_status_lists' ]
9 verbose tarball /Users/r01010010/.npm/http-status-lists/0.0.3/package.tgz
10 verbose folder /Users/r01010010/Projects/http_status_lists
11 info prepublish http-status-lists@0.0.3
12 verbose addLocalTarball adding from inside cache /Users/r01010010/.npm/http-status-lists/0.0.3/package.tgz
13 silly cache afterAdd http-status-lists@0.0.3
14 verbose afterAdd /Users/r01010010/.npm/http-status-lists/0.0.3/package/package.json not in flight; writing
15 verbose afterAdd /Users/r01010010/.npm/http-status-lists/0.0.3/package/package.json written
16 silly publish { name: 'http-status-lists',
16 silly publish   version: '0.0.3',
16 silly publish   description: 'HTTP status codes agrouped by categories like for example REST or SUCCESFUL codes',
16 silly publish   author: { name: 'Paloma Jiménez', email: 'r01010010@gmail.com' },
16 silly publish   keywords: [ 'http', 'status', 'codes', 'rest', 'services' ],
16 silly publish   repository:
16 silly publish    { type: 'git',
16 silly publish      url: 'http://github.com/r01010010/http_status_lists' },
16 silly publish   bugs:
16 silly publish    { url: 'http://github.com/r01010010/http_status_codes_extended/issues',
16 silly publish      email: 'r01010010@gmail.com' },
16 silly publish   devDependencies: {},
16 silly publish   contributors: [],
16 silly publish   main: './lib/HTTPStatus',
16 silly publish   engines: { node: '>= 0.4.0' },
16 silly publish   scripts: { test: 'mocha' },
16 silly publish   readme: '# HTTP Status codes for node\n\nUtility to interact with HTTP status codes grouped by categories (All, REST, Successful, Errors, etc)\n\n## This module is based on\nThis module is based on https://github.com/wdavidw/node-http-status\n\n## Usage\n\nOnce you require this module, you may call it with either an HTTP code or a message name. With an HTTP code, you will get the message name while with a message name you will get an HTTP code. Simple.\n\n## API\n\nThis module is extremely simple.\n\n### API sample\n\n```javascript\n    var HTTPStatus = require(\'http-status-lists\');\n\n    // Print "Internal Server Error"\n    console.log(HTTPStatus.ALL[500]);\n\n    // Print 500\n    console.log(HTTPStatus.ALL.C500_INTERNAL_SERVER_ERROR);\n\n    // Print 201 with using the REST commonly used group\n    console.log(HTTPStatus.REST.C201_CREATED);\n```\n\n### Code example\n\n```javascript\n\t/**\n     * Commonly used for REST Apis\n     */\n    REST: {\n        200: \'OK\', // When a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn\'t result in a creation.\n        201: \'Created\', // When a POST that results in a creation. Should be combined with a Location header pointing to the location of the new resource\n        204: \'No Content\', // When a successful request won\'t be returning a body (like a DELETE request)\n        302: \'Found\', // When a successful request as a query returns results\n        304: \'Not Modified\', // When HTTP caching headers are in play\n        400: \'Bad Request\', // When request is malformed, such as if the body does not parse\n        401: \'Unauthorized\', // When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser\n        403: \'Forbidden\', // When authentication succeeded but authenticated user doesn\'t have access to the resource\n        404: \'Not Found\', // When a non-existent resource is requested\n        405: \'Method Not Allowed\', // When an HTTP method is being requested that isn\'t allowed for the authenticated user\n        410: \'Gone\', // When the resource at this end point is no longer available. Useful as a blanket response for old API versions\n        415: \'Unsupported Media Type\', // When an incorrect content type was provided as part of the request\n        422: \'Unprocessable Entity\', // When there\'s  validation errors\n        429: \'Too Many Requests\', // When a request is rejected due to rate limiting\n        500: \'Internal Server Error\', // When there\'s unknown technical errors\n\n        C200_OK: 200,\n        C201_CREATED: 201,\n        C204_NO_CONTENT: 204,\n        C302_FOUND: 302,\n        C304_NOT_MODIFIED: 304,\n        C400_BAD_REQUEST: 400,\n        C401_UNAUTHORIZED: 401,\n        C403_FORBIDDEN: 403,\n        C404_NOT_FOUND: 404,\n        C405_METHOD_NOT_ALLOWED: 405,\n        C410_GONE: 410,\n        C415_UNSUPPORTED_MEDIA_TYPE: 415,\n        C422_UNPROCESSABLE_ENTITY: 422,\n        C429_TOO_MANY_REQUESTS: 429,\n        C500_INTERNAL_SERVER_ERROR: 500\n    }\n```\n\nContributors\n------------\n\n*   Paloma Jiménez: r01010010@gmail.com\n',
16 silly publish   readmeFilename: 'README.md',
16 silly publish   gitHead: 'e765121b82ed60e82db9e36038c0f990b217b42f',
16 silly publish   homepage: 'https://github.com/r01010010/http_status_lists',
16 silly publish   _id: 'http-status-lists@0.0.3',
16 silly publish   _shasum: 'afd242c84c6ec4d85b71e097072d835f45b6c916',
16 silly publish   _from: '.' }
17 silly mapToRegistry name http-status-lists
18 silly mapToRegistry using default registry
19 silly mapToRegistry registry https://registry.npmjs.org/
20 silly mapToRegistry uri https://registry.npmjs.org/http-status-lists
21 verbose publish registryBase https://registry.npmjs.org/
22 silly publish uploading /Users/r01010010/.npm/http-status-lists/0.0.3/package.tgz
23 verbose request uri https://registry.npmjs.org/http-status-lists
24 verbose request sending authorization for write operation
25 info attempt registry request try #1 at 18:26:02
26 verbose request id 33fb711f3debfe48
27 http request PUT https://registry.npmjs.org/http-status-lists
28 http 403 https://registry.npmjs.org/http-status-lists
29 verbose headers { date: 'Sat, 14 Feb 2015 17:26:02 GMT',
29 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
29 verbose headers   'content-type': 'application/json',
29 verbose headers   'cache-control': 'max-age=60',
29 verbose headers   'content-length': '6142',
29 verbose headers   'accept-ranges': 'bytes',
29 verbose headers   via: '1.1 varnish',
29 verbose headers   'x-served-by': 'cache-ams4133-AMS',
29 verbose headers   'x-cache': 'MISS',
29 verbose headers   'x-cache-hits': '0',
29 verbose headers   'x-timer': 'S1423934761.777814,VS0,VE761',
29 verbose headers   'keep-alive': 'timeout=10, max=50',
29 verbose headers   connection: 'Keep-Alive' }
30 verbose request invalidating /Users/r01010010/.npm/registry.npmjs.org/http-status-lists on PUT
31 error publish Failed PUT 403
32 verbose stack Error: forbidden cannot modify pre-existing version: 0.0.3
32 verbose stack old={"name":"http-status-lists","version":"0.0.3","description":"HTTP status codes agrouped by categories like for example REST or SUCCESFUL codes","author":{"name":"Paloma Jiménez","email":"r01010010@gmail.com"},"keywords":["http","status","codes","rest","services"],"repository":{"type":"git","url":"http://github.com/r01010010/http_status_lists"},"bugs":{"url":"http://github.com/r01010010/http_status_codes_extended/issues","email":"r01010010@gmail.com"},"devDependencies":{},"contributors":[],"main":"./lib/HTTPStatus","engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha"},"gitHead":"364247c5a5505e57bf6a555152e831475138524f","homepage":"https://github.com/r01010010/http_status_lists","_id":"http-status-lists@0.0.3","_shasum":"40e1b5326279100f0a2d71795167f1f2abb5fd55","_from":".","_npmVersion":"2.1.8","_nodeVersion":"0.10.33","_npmUser":{"name":"r01010010","email":"r01010010@gmail.com"},"maintainers":[{"name":"r01010010","email":"r01010010@gmail.com"}],"dist":{"shasum":"40e1b5326279100f0a2d71795167f1f2abb5fd55","tarball":"http://registry.npmjs.org/http-status-lists/-/http-status-lists-0.0.3.tgz"}}
32 verbose stack new={"name":"http-status-lists","version":"0.0.3","description":"HTTP status codes agrouped by categories like for example REST or SUCCESFUL codes","author":{"name":"Paloma Jiménez","email":"r01010010@gmail.com"},"keywords":["http","status","codes","rest","services"],"repository":{"type":"git","url":"http://github.com/r01010010/http_status_lists"},"bugs":{"url":"http://github.com/r01010010/http_status_codes_extended/issues","email":"r01010010@gmail.com"},"devDependencies":{},"contributors":[],"main":"./lib/HTTPStatus","engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha"},"readme":"# HTTP Status codes for node\u000a\u000aUtility to interact with HTTP status codes grouped by categories (All, REST, Successful, Errors, etc)\u000a\u000a## This module is based on\u000aThis module is based on https://github.com/wdavidw/node-http-status\u000a\u000a## Usage\u000a\u000aOnce you require this module, you may call it with either an HTTP code or a message name. With an HTTP code, you will get the message name while with a message name you will get an HTTP code. Simple.\u000a\u000a## API\u000a\u000aThis module is extremely simple.\u000a\u000a### API sample\u000a\u000a```javascript\u000a    var HTTPStatus = require('http-status-lists');\u000a\u000a    // Print \"Internal Server Error\"\u000a    console.log(HTTPStatus.ALL[500]);\u000a\u000a    // Print 500\u000a    console.log(HTTPStatus.ALL.C500_INTERNAL_SERVER_ERROR);\u000a\u000a    // Print 201 with using the REST commonly used group\u000a    console.log(HTTPStatus.REST.C201_CREATED);\u000a```\u000a\u000a### Code example\u000a\u000a```javascript\u000a\u0009/**\u000a     * Commonly used for REST Apis\u000a     */\u000a    REST: {\u000a        200: 'OK', // When a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn't result in a creation.\u000a        201: 'Created', // When a POST that results in a creation. Should be combined with a Location header pointing to the location of the new resource\u000a        204: 'No Content', // When a successful request won't be returning a body (like a DELETE request)\u000a        302: 'Found', // When a successful request as a query returns results\u000a        304: 'Not Modified', // When HTTP caching headers are in play\u000a        400: 'Bad Request', // When request is malformed, such as if the body does not parse\u000a        401: 'Unauthorized', // When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser\u000a        403: 'Forbidden', // When authentication succeeded but authenticated user doesn't have access to the resource\u000a        404: 'Not Found', // When a non-existent resource is requested\u000a        405: 'Method Not Allowed', // When an HTTP method is being requested that isn't allowed for the authenticated user\u000a        410: 'Gone', // When the resource at this end point is no longer available. Useful as a blanket response for old API versions\u000a        415: 'Unsupported Media Type', // When an incorrect content type was provided as part of the request\u000a        422: 'Unprocessable Entity', // When there's  validation errors\u000a        429: 'Too Many Requests', // When a request is rejected due to rate limiting\u000a        500: 'Internal Server Error', // When there's unknown technical errors\u000a\u000a        C200_OK: 200,\u000a        C201_CREATED: 201,\u000a        C204_NO_CONTENT: 204,\u000a        C302_FOUND: 302,\u000a        C304_NOT_MODIFIED: 304,\u000a        C400_BAD_REQUEST: 400,\u000a        C401_UNAUTHORIZED: 401,\u000a        C403_FORBIDDEN: 403,\u000a        C404_NOT_FOUND: 404,\u000a        C405_METHOD_NOT_ALLOWED: 405,\u000a        C410_GONE: 410,\u000a        C415_UNSUPPORTED_MEDIA_TYPE: 415,\u000a        C422_UNPROCESSABLE_ENTITY: 422,\u000a        C429_TOO_MANY_REQUESTS: 429,\u000a        C500_INTERNAL_SERVER_ERROR: 500\u000a    }\u000a```\u000a\u000aContributors\u000a------------\u000a\u000a*   Paloma Jiménez: r01010010@gmail.com\u000a","readmeFilename":"README.md","gitHead":"e765121b82ed60e82db9e36038c0f990b217b42f","homepage":"https://github.com/r01010010/http_status_lists","_id":"http-status-lists@0.0.3","_shasum":"afd242c84c6ec4d85b71e097072d835f45b6c916","_from":".","_npmVersion":"2.1.8","_nodeVersion":"0.10.33","_npmUser":{"name":"r01010010","email":"r01010010@gmail.com"},"maintainers":[{"name":"r01010010","email":"r01010010@gmail.com"}],"dist":{"shasum":"afd242c84c6ec4d85b71e097072d835f45b6c916","tarball":"http://registry.npmjs.org/http-status-lists/-/http-status-lists-0.0.3.tgz"}}: http-status-lists
32 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:234:14)
32 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
32 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:372:22)
32 verbose stack     at Request.emit (events.js:98:17)
32 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:1317:14)
32 verbose stack     at Request.emit (events.js:117:20)
32 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/node_modules/request/request.js:1265:12)
32 verbose stack     at IncomingMessage.emit (events.js:117:20)
32 verbose stack     at _stream_readable.js:943:16
32 verbose stack     at process._tickCallback (node.js:419:13)
33 verbose statusCode 403
34 verbose pkgid http-status-lists
35 verbose cwd /Users/r01010010/Projects/http_status_lists
36 error Darwin 14.0.0
37 error argv "node" "/usr/local/bin/npm" "publish"
38 error node v0.10.33
39 error npm  v2.1.8
40 error code E403
41 error forbidden cannot modify pre-existing version: 0.0.3
41 error old={"name":"http-status-lists","version":"0.0.3","description":"HTTP status codes agrouped by categories like for example REST or SUCCESFUL codes","author":{"name":"Paloma Jiménez","email":"r01010010@gmail.com"},"keywords":["http","status","codes","rest","services"],"repository":{"type":"git","url":"http://github.com/r01010010/http_status_lists"},"bugs":{"url":"http://github.com/r01010010/http_status_codes_extended/issues","email":"r01010010@gmail.com"},"devDependencies":{},"contributors":[],"main":"./lib/HTTPStatus","engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha"},"gitHead":"364247c5a5505e57bf6a555152e831475138524f","homepage":"https://github.com/r01010010/http_status_lists","_id":"http-status-lists@0.0.3","_shasum":"40e1b5326279100f0a2d71795167f1f2abb5fd55","_from":".","_npmVersion":"2.1.8","_nodeVersion":"0.10.33","_npmUser":{"name":"r01010010","email":"r01010010@gmail.com"},"maintainers":[{"name":"r01010010","email":"r01010010@gmail.com"}],"dist":{"shasum":"40e1b5326279100f0a2d71795167f1f2abb5fd55","tarball":"http://registry.npmjs.org/http-status-lists/-/http-status-lists-0.0.3.tgz"}}
41 error new={"name":"http-status-lists","version":"0.0.3","description":"HTTP status codes agrouped by categories like for example REST or SUCCESFUL codes","author":{"name":"Paloma Jiménez","email":"r01010010@gmail.com"},"keywords":["http","status","codes","rest","services"],"repository":{"type":"git","url":"http://github.com/r01010010/http_status_lists"},"bugs":{"url":"http://github.com/r01010010/http_status_codes_extended/issues","email":"r01010010@gmail.com"},"devDependencies":{},"contributors":[],"main":"./lib/HTTPStatus","engines":{"node":">= 0.4.0"},"scripts":{"test":"mocha"},"readme":"# HTTP Status codes for node\u000a\u000aUtility to interact with HTTP status codes grouped by categories (All, REST, Successful, Errors, etc)\u000a\u000a## This module is based on\u000aThis module is based on https://github.com/wdavidw/node-http-status\u000a\u000a## Usage\u000a\u000aOnce you require this module, you may call it with either an HTTP code or a message name. With an HTTP code, you will get the message name while with a message name you will get an HTTP code. Simple.\u000a\u000a## API\u000a\u000aThis module is extremely simple.\u000a\u000a### API sample\u000a\u000a```javascript\u000a    var HTTPStatus = require('http-status-lists');\u000a\u000a    // Print \"Internal Server Error\"\u000a    console.log(HTTPStatus.ALL[500]);\u000a\u000a    // Print 500\u000a    console.log(HTTPStatus.ALL.C500_INTERNAL_SERVER_ERROR);\u000a\u000a    // Print 201 with using the REST commonly used group\u000a    console.log(HTTPStatus.REST.C201_CREATED);\u000a```\u000a\u000a### Code example\u000a\u000a```javascript\u000a\u0009/**\u000a     * Commonly used for REST Apis\u000a     */\u000a    REST: {\u000a        200: 'OK', // When a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn't result in a creation.\u000a        201: 'Created', // When a POST that results in a creation. Should be combined with a Location header pointing to the location of the new resource\u000a        204: 'No Content', // When a successful request won't be returning a body (like a DELETE request)\u000a        302: 'Found', // When a successful request as a query returns results\u000a        304: 'Not Modified', // When HTTP caching headers are in play\u000a        400: 'Bad Request', // When request is malformed, such as if the body does not parse\u000a        401: 'Unauthorized', // When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser\u000a        403: 'Forbidden', // When authentication succeeded but authenticated user doesn't have access to the resource\u000a        404: 'Not Found', // When a non-existent resource is requested\u000a        405: 'Method Not Allowed', // When an HTTP method is being requested that isn't allowed for the authenticated user\u000a        410: 'Gone', // When the resource at this end point is no longer available. Useful as a blanket response for old API versions\u000a        415: 'Unsupported Media Type', // When an incorrect content type was provided as part of the request\u000a        422: 'Unprocessable Entity', // When there's  validation errors\u000a        429: 'Too Many Requests', // When a request is rejected due to rate limiting\u000a        500: 'Internal Server Error', // When there's unknown technical errors\u000a\u000a        C200_OK: 200,\u000a        C201_CREATED: 201,\u000a        C204_NO_CONTENT: 204,\u000a        C302_FOUND: 302,\u000a        C304_NOT_MODIFIED: 304,\u000a        C400_BAD_REQUEST: 400,\u000a        C401_UNAUTHORIZED: 401,\u000a        C403_FORBIDDEN: 403,\u000a        C404_NOT_FOUND: 404,\u000a        C405_METHOD_NOT_ALLOWED: 405,\u000a        C410_GONE: 410,\u000a        C415_UNSUPPORTED_MEDIA_TYPE: 415,\u000a        C422_UNPROCESSABLE_ENTITY: 422,\u000a        C429_TOO_MANY_REQUESTS: 429,\u000a        C500_INTERNAL_SERVER_ERROR: 500\u000a    }\u000a```\u000a\u000aContributors\u000a------------\u000a\u000a*   Paloma Jiménez: r01010010@gmail.com\u000a","readmeFilename":"README.md","gitHead":"e765121b82ed60e82db9e36038c0f990b217b42f","homepage":"https://github.com/r01010010/http_status_lists","_id":"http-status-lists@0.0.3","_shasum":"afd242c84c6ec4d85b71e097072d835f45b6c916","_from":".","_npmVersion":"2.1.8","_nodeVersion":"0.10.33","_npmUser":{"name":"r01010010","email":"r01010010@gmail.com"},"maintainers":[{"name":"r01010010","email":"r01010010@gmail.com"}],"dist":{"shasum":"afd242c84c6ec4d85b71e097072d835f45b6c916","tarball":"http://registry.npmjs.org/http-status-lists/-/http-status-lists-0.0.3.tgz"}}: http-status-lists
42 error If you need help, you may report this error at:
42 error     <http://github.com/npm/npm/issues>
43 verbose exit [ 1, true ]
